{"version":3,"sources":["components/ChevronIcon.tsx","components/AngleAccordion.tsx","components/TextInput.tsx","components/AnimatePanel.tsx","components/constants.tsx","components/ValueSlider.tsx","components/ModelControls.tsx","components/ModelGeneratorFunctions.ts","components/ThreeContainer.tsx","App.tsx","index.tsx"],"names":["ChevronIcon","props","aria-hidden","focusable","data-prefix","height","width","className","data-icon","role","xmlns","viewBox","fill","d","stopPropagation","event","AngleAccordion","React","memo","useState","setActive","setActiveState","setHeight","setHeightState","setRotate","setRotateState","setSelected","setSelectedState","content","useRef","useEffect","onSelect","onClick","selectItem","index","deSelectItem","preventDefault","current","scrollHeight","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","children","header","ref","style","maxHeight","body","handleKeyDown","key","currentTarget","blur","onBlur","value","text","n","Math","floor","Number","Infinity","String","isNormalInteger","alert","window","scrollTo","numValue","parseInt","min","max","updateRobotValue","valueIndex","TextInput","robotValue","label","type","onChange","target","onKeyDown","AnimatePanel","resetPosition","onAddItem","setState","RobotValues","state","values","list","selectedPositions","push","splice","setSelectState","select","cancelSelect","onDeleteItems","robotValuesCopy","sort","a","b","forEach","loadCurrentPosition","length","position","receiveRobotValues","robotValueCopy","startAnimation","stopAnimation","renderAccordion","padding","map","item","toString","this","animate","Button","size","aria-label","variant","disabled","PureComponent","defSpriteParams","fontsize","fontface","backgroundColor","xParams","textColor","borderColor","yParams","zParams","ControlConfig","defaultVal","valUnit","handleSliderChange","setValue","changeDir","setChangeDir","ypos","parseFloat","endEffectorYcor","toFixed","newValue","intersecting","effectorIntersect","updateValue","ValueSlider","step","ModelControls","containerRef","longPressTimeout","onMobile","resizeControls","isPortrait","matchMedia","matches","pos","portraitPos","landscapePos","offsetWidth","offsetLeft","xDelta","innerWidth","x","y","button","top","offsetTop","left","newPosition","pageX","pageY","cursor","dragging","rel","onMouseMove","innerHeight","offsetHeight","newX","newY","onMouseLeave","touches","setTimeout","overflow","onTouchMove","clearTimeout","toggleControls","showControls","toggleAxes","displayAxis","showAxes","toggleLabels","showLabels","displayLabel","robotValues","animation","pressShowControls","console","log","updateArmConfig","config","slice","updateConfig","renderSlider","getEndEffectorYcor","createRef","test","navigator","userAgent","addEventListener","removeEventListener","unselectable","minWidth","undefined","display","id","Component","createCylinder","radius","THREE","createBox","depth","makeTextSprite","message","params","z","borderThickness","canvas","document","createElement","context","getContext","font","textWidth","measureText","fillStyle","strokeStyle","lineWidth","ctx","w","h","r","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","stroke","roundRect","fillText","texture","minFilter","needsUpdate","spriteMaterial","premultipliedAlpha","dithering","transparent","precision","depthWrite","sprite","scale","set","center","transparentMat","color","opacity","yMat","blackMat","ThreeContainer","threeRootElement","canvasRef","canvasCtx","plane","frameId","light","prevState","showAxis","positionSeq","rotateFuncs","handles","scene","camera","renderer","antialias","joint","jointAxisStart","jointAxisEnd","origins","gripper","gripperPositions","endEffector","robotBase","labels","axis","boundingBox1","boundingBox2","lines","controls","OrbitControls","domElement","worldPos","crtIndex","nextIndex","angleDelta","frameCount","createBoundingBoxes","geometry","computeBoundingBox","setFromObject","endEffectorIntersect","containsPoint","endEffectorCoordinates","onSizeChange","clientWidth","clientHeight","setSize","aspect","updateProjectionMatrix","sendRobotValues","rotateJoint1","newAngle","prevAngle","angle","rad","rotateY","rotateJoint2","clone","sub","point","rotate","rotateJoint3","rotateJoint4","updateGripper","prevValue","leftDelta","rightDelta","copy","multiplyScalar","add","PI","obj","theta","normalAxis","normalize","applyAxisAngle","rotateOnAxis","updateAxesVisibility","visible","i","displayLabelVisibility","line","start","requestAnimationFrame","renderTHREE","getWorldPosition","drawEffectCoordinates","clearRect","drawTextOnCanvas","updateView","update","render","drawPositions","positions","setPixelRatio","devicePixelRatio","object","appendChild","setClearColor","base","baseCylinder","cylinder","baseBox","joint2Base","jointCylinder","rotateX","constructJoint1","joint2Bar","constructJoint2","armBody","armBodyCover","constructJoint3","constructJoint4","points","setFromPoints","createLabels","gridhelper","lookAt","createDisplay","nextProps","nextState","App","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1c5b3671.chunk.js","sourcesContent":["import React from 'react';\ninterface Props {\n  className: string;\n  height: number;\n  width: number;\n  fill: string;\n}\nexport const ChevronIcon = (props: Props) => {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      focusable=\"false\"\n      data-prefix=\"fas\"\n      height={props.height}\n      width={props.width}\n      className={props.className}\n      data-icon=\"chevron-right\"\n      role=\"img\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 320 512\"\n    >\n      <path\n        fill={props.fill}\n        d=\"M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z\"\n      ></path>\n    </svg>\n  );\n};\n","import React, { FunctionComponent, useRef, useState } from 'react';\nimport { ChevronIcon } from './ChevronIcon';\nimport { AccordionProps } from './constants';\nimport './styles/AngleAccordion.scss';\n\nconst stopPropagation = (\n  event:\n    | React.MouseEvent<HTMLButtonElement, MouseEvent>\n    | React.TouchEvent<HTMLButtonElement>,\n) => {\n  event.stopPropagation();\n};\n\nexport const AngleAccordion: FunctionComponent<AccordionProps> = React.memo(\n  (props: AccordionProps) => {\n    const [setActive, setActiveState] = useState('');\n    const [setHeight, setHeightState] = useState('0px');\n    const [setRotate, setRotateState] = useState('accordion__icon');\n    const [setSelected, setSelectedState] = useState('');\n    const content = useRef<HTMLDivElement>(null);\n    // Show the accordion on active state\n    const toggleAccordion = () => {\n      setActiveState(setActive === '' ? 'active' : '');\n      setHeightState(\n        setActive === 'active' ? '0px' : `${content.current?.scrollHeight}px`,\n      );\n      setRotateState(\n        setActive === 'active' ? 'accordion__icon' : 'accordion__icon rotate',\n      );\n    };\n    /* Select the accordion object and update color. This state is used, with the\n    select state, and will be used to delete items. By the parent component     */\n    const selectItem = (\n      event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    ) => {\n      setHeightState('0px');\n\n      if (setSelected !== 'selected-item') {\n        props.selectItem(props.index);\n        setSelectedState('selected-item');\n      } else {\n        props.deSelectItem(props.index);\n        setSelectedState('');\n      }\n      event.preventDefault();\n      event.stopPropagation();\n    };\n\n    // Reset the active, selected, rotation and height state on prop changes\n    React.useEffect(() => {\n      if (!props.onSelect) {\n        setActiveState('');\n        setSelectedState('');\n        setRotateState('accordion__icon');\n        setHeightState('0px');\n      }\n    }, [props.onSelect]);\n\n    return (\n      <div className=\"accordion__section\">\n        <button\n          className={\n            props.onSelect\n              ? `accordion ${setSelected}`\n              : `accordion ${setActive}`\n          }\n          onClick={props.onSelect ? selectItem : toggleAccordion}\n          onTouchStart={stopPropagation}\n          onTouchEnd={stopPropagation}\n          onMouseDown={stopPropagation}\n          onMouseUp={stopPropagation}\n        >\n          {props.children.header}\n          <ChevronIcon\n            className={props.onSelect ? 'accordion__icon' : `${setRotate}`}\n            width={15}\n            height={15}\n            fill={'#777'}\n          />\n        </button>\n        <div\n          ref={content}\n          className=\"accordion__content\"\n          style={{ maxHeight: props.onSelect ? '0px' : setHeight }}\n        >\n          <div className=\"accordion__text\">{props.children.body}</div>\n        </div>\n      </div>\n    );\n  },\n);\n","import React, { memo, useState } from 'react';\nimport './styles/TextInput.scss';\ninterface TextInputProps {\n  label: string;\n  index: number;\n  valueIndex: number;\n  value: string;\n  min: number;\n  max: number;\n  updateRobotValue(index: number, valueIndex: number, value: number): void;\n}\n\n// Stop propagation to parent div press, mouse events.\nconst stopPropagation = (\n  event:\n    | React.MouseEvent<HTMLFormElement, MouseEvent>\n    | React.TouchEvent<HTMLFormElement>\n    | React.TouchEvent<HTMLInputElement>\n    | React.MouseEvent<HTMLInputElement, MouseEvent>,\n) => {\n  event.stopPropagation();\n};\n\n/* Verify that the text is a numeric value*/\nconst isNormalInteger = (text: string) => {\n  const n = Math.floor(Number(text));\n  return n !== Infinity && String(n) === text;\n};\n\n/* Detect whether the Enter key is press. Without this, the default action is\nto reload the page. With the event, the target is blurred and sent up to the \nparent via props.                                                            */\nconst handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n  if (event.key === 'Enter') event.currentTarget.blur();\n};\n\n/* Update the values stored by the parent via a props callback */\nconst onBlur = (props: TextInputProps, value: string) => (\n  event: React.FocusEvent<HTMLInputElement>,\n) => {\n  event.stopPropagation();\n  event.preventDefault();\n\n  /* Verify that the text is numberic*/\n  if (!isNormalInteger(value)) {\n    alert('The value must be numeric.');\n    event.currentTarget.value = props.value;\n    window.scrollTo(0, 0);\n    return;\n  }\n\n  /* Verify that the input text numeric is within specific bounds*/\n  const numValue = parseInt(value);\n  if (numValue >= props.min && numValue <= props.max)\n    // Update parent values\n    props.updateRobotValue(props.index, props.valueIndex, numValue);\n  else {\n    alert(\n      `The value must be within the boundaries. \\nMin: ${props.min}    Max: ${props.max}`,\n    );\n    event.currentTarget.value = props.value;\n  }\n\n  // Scroll the window upwards because the keyboard moves the viewport.\n  window.scrollTo(0, 0);\n};\n\n// Text Input component\nexport const TextInput = memo((props: TextInputProps) => {\n  // Local value stored by the input\n  const [robotValue, updateRobotValue] = useState('0');\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    updateRobotValue(event.target.value);\n    event.stopPropagation();\n  };\n\n  React.useEffect(() => {\n    updateRobotValue(props.value);\n  }, [props.value]);\n  return (\n    <form\n      onMouseUp={stopPropagation}\n      onTouchEnd={stopPropagation}\n      onMouseDown={stopPropagation}\n      onTouchStart={stopPropagation}\n    >\n      <div className=\"label\">\n        <p>{props.label}</p>\n      </div>\n      <div className=\"input\">\n        <input\n          type=\"number\"\n          onChange={onChange}\n          value={robotValue}\n          max={props.max}\n          min={props.min}\n          onBlur={onBlur(props, robotValue)}\n          onKeyDown={handleKeyDown}\n          onMouseUp={stopPropagation}\n          onTouchEnd={stopPropagation}\n          onMouseDown={stopPropagation}\n          onTouchStart={stopPropagation}\n        ></input>\n      </div>\n    </form>\n  );\n});\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { AngleAccordion } from './AngleAccordion';\nimport { RobotValue } from './constants';\nimport './styles/AnimatePanel.scss';\nimport { TextInput } from './TextInput';\n\ninterface Props {\n  resetPosition(): void;\n  receiveRobotValues(): number[];\n  startAnimation(robotValues: RobotValue[]): void;\n  stopAnimation(): void;\n  animate: boolean;\n}\ninterface State {\n  RobotValues: RobotValue[];\n  selectedPositions: number[];\n  select: boolean;\n}\nexport type RobotValueKey =\n  | 'joint1'\n  | 'joint2'\n  | 'joint3'\n  | 'joint4'\n  | 'gripper';\nclass AnimatePanel extends React.PureComponent<Props, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      select: false,\n      selectedPositions: [],\n      RobotValues: [{ values: [0, 0, 0, 0, 0] }],\n    };\n  }\n  resetPosition = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.currentTarget.blur();\n    this.props.resetPosition();\n    event.stopPropagation();\n  };\n  stopPropagation = (\n    event:\n      | React.MouseEvent<HTMLButtonElement, MouseEvent>\n      | React.TouchEvent<HTMLButtonElement>\n      | React.MouseEvent<HTMLDivElement, MouseEvent>\n      | React.TouchEvent<HTMLDivElement>,\n  ) => {\n    event.stopPropagation();\n  };\n  onAddItem = (\n    event:\n      | React.MouseEvent<HTMLButtonElement, MouseEvent>\n      | React.TouchEvent<HTMLButtonElement>,\n  ) => {\n    event.currentTarget.blur();\n    this.setState({\n      RobotValues: [...this.state.RobotValues, { values: [0, 0, 0, 0, 0] }],\n    });\n    event.stopPropagation();\n  };\n  selectItem = (index: number) => {\n    const list = this.state.selectedPositions;\n    list.push(index);\n    this.setState({ selectedPositions: list });\n  };\n  deSelectItem = (index: number) => {\n    const list = this.state.selectedPositions;\n    list.splice(index, 1);\n    this.setState({ selectedPositions: list });\n  };\n  setSelectState = (\n    event:\n      | React.MouseEvent<HTMLButtonElement, MouseEvent>\n      | React.TouchEvent<HTMLButtonElement>,\n  ) => {\n    event.currentTarget.blur();\n    this.setState({ select: true });\n    event.stopPropagation();\n  };\n  cancelSelect = (\n    event:\n      | React.MouseEvent<HTMLButtonElement, MouseEvent>\n      | React.TouchEvent<HTMLButtonElement>,\n  ) => {\n    event.currentTarget.blur();\n    this.setState({ select: false });\n    event.stopPropagation();\n  };\n  onDeleteItems = (\n    event:\n      | React.MouseEvent<HTMLButtonElement, MouseEvent>\n      | React.TouchEvent<HTMLButtonElement>,\n  ) => {\n    event.currentTarget.blur();\n\n    const robotValuesCopy = [...this.state.RobotValues];\n    const selectedPositions = [...this.state.selectedPositions];\n    selectedPositions.sort((a, b) => b - a);\n    selectedPositions.forEach((index) => {\n      robotValuesCopy.splice(index, 1);\n    });\n\n    this.setState({\n      RobotValues: robotValuesCopy,\n      select: false,\n      selectedPositions: [],\n    });\n    event.stopPropagation();\n  };\n  loadCurrentPosition = (\n    event:\n      | React.MouseEvent<HTMLButtonElement, MouseEvent>\n      | React.TouchEvent<HTMLButtonElement>,\n  ) => {\n    event.currentTarget.blur();\n    event.stopPropagation();\n    const { length } = this.state.RobotValues;\n    if (length === 0) return;\n    const position = this.props.receiveRobotValues();\n    const index = this.state.RobotValues.length - 1;\n    const robotValueCopy = [...this.state.RobotValues];\n    robotValueCopy[index] = {\n      values: position,\n    };\n    this.setState({ RobotValues: robotValueCopy });\n  };\n  startAnimation = (\n    event:\n      | React.MouseEvent<HTMLButtonElement, MouseEvent>\n      | React.TouchEvent<HTMLButtonElement>,\n  ) => {\n    this.props.startAnimation(this.state.RobotValues);\n    event.currentTarget.blur();\n    event.stopPropagation();\n  };\n  stopAnimation = (\n    event:\n      | React.MouseEvent<HTMLButtonElement, MouseEvent>\n      | React.TouchEvent<HTMLButtonElement>,\n  ) => {\n    this.props.stopAnimation();\n    event.currentTarget.blur();\n    event.stopPropagation();\n  };\n  updateRobotValue = (index: number, valueIndex: number, value: number) => {\n    const robotValuesCopy = [...this.state.RobotValues];\n    robotValuesCopy[index].values[valueIndex] = value;\n    this.setState({ RobotValues: robotValuesCopy });\n  };\n  renderAccordion = () => {\n    return (\n      <div\n        style={{ padding: 10 }}\n        onMouseUp={this.stopPropagation}\n        onTouchEnd={this.stopPropagation}\n        onMouseDown={this.stopPropagation}\n        onTouchStart={this.stopPropagation}\n      >\n        {this.state.RobotValues.map((item, index) => {\n          return (\n            <AngleAccordion\n              key={index + 'g'}\n              index={index}\n              selectItem={this.selectItem}\n              deSelectItem={this.deSelectItem}\n              onSelect={this.state.select}\n            >\n              {{\n                header: <div>{`Position ${index + 1}`}</div>,\n                body: (\n                  <div>\n                    <TextInput\n                      value={item.values[0].toString()}\n                      label={'Joint 1'}\n                      index={index}\n                      valueIndex={0}\n                      updateRobotValue={this.updateRobotValue}\n                      min={-135}\n                      max={135}\n                    />\n                    <TextInput\n                      value={item.values[1].toString()}\n                      label={'Joint 2'}\n                      index={index}\n                      valueIndex={1}\n                      updateRobotValue={this.updateRobotValue}\n                      min={-85}\n                      max={85}\n                    />\n                    <TextInput\n                      value={item.values[2].toString()}\n                      label={'Joint 3'}\n                      index={index}\n                      valueIndex={2}\n                      updateRobotValue={this.updateRobotValue}\n                      min={-135}\n                      max={135}\n                    />\n                    <TextInput\n                      value={item.values[3].toString()}\n                      label={'Joint 4'}\n                      index={index}\n                      valueIndex={3}\n                      updateRobotValue={this.updateRobotValue}\n                      min={-60}\n                      max={60}\n                    />\n                    <TextInput\n                      value={item.values[4].toString()}\n                      label={'Gripper'}\n                      index={index}\n                      valueIndex={4}\n                      updateRobotValue={this.updateRobotValue}\n                      min={0}\n                      max={100}\n                    />\n                  </div>\n                ),\n              }}\n            </AngleAccordion>\n          );\n        })}\n      </div>\n    );\n  };\n  render() {\n    const { select } = this.state;\n    const { animate } = this.props;\n    return (\n      <div>\n        <div className=\"positions-container\">\n          <h4>Set Arm Movement</h4>\n          <p>\n            Use the controls below to set a sequence of angle positions. Use the\n            animate button to show the robot arm motion.\n          </p>\n          <div className=\"button-container\">\n            <Button\n              size=\"lg\"\n              aria-label=\"positions-button\"\n              variant=\"primary\"\n              disabled={animate}\n              onClick={select ? this.cancelSelect : this.setSelectState}\n              onMouseUp={this.stopPropagation}\n              onTouchEnd={this.stopPropagation}\n              onMouseDown={this.stopPropagation}\n              onTouchStart={this.stopPropagation}\n            >\n              {this.state.select ? 'Cancel' : 'Select'}\n            </Button>\n            <Button\n              size=\"lg\"\n              disabled={animate}\n              aria-label=\"positions-button\"\n              variant=\"primary\"\n              onClick={select ? this.onDeleteItems : this.onAddItem}\n              onMouseUp={this.stopPropagation}\n              onTouchEnd={this.stopPropagation}\n              onMouseDown={this.stopPropagation}\n              onTouchStart={this.stopPropagation}\n            >\n              {select ? 'Delete' : 'Add'}\n            </Button>\n            <Button\n              size=\"lg\"\n              disabled={select || animate}\n              aria-label=\"positions-button\"\n              variant=\"primary\"\n              onClick={this.loadCurrentPosition}\n              onMouseUp={this.stopPropagation}\n              onTouchEnd={this.stopPropagation}\n              onMouseDown={this.stopPropagation}\n              onTouchStart={this.stopPropagation}\n            >\n              Current Position\n            </Button>\n          </div>\n          {this.renderAccordion()}\n        </div>\n\n        <div className=\"button-container\">\n          <Button\n            size=\"lg\"\n            disabled={select || animate}\n            variant=\"primary\"\n            aria-label=\"First group\"\n            onClick={this.resetPosition}\n            onMouseUp={this.stopPropagation}\n            onTouchEnd={this.stopPropagation}\n            onMouseDown={this.stopPropagation}\n            onTouchStart={this.stopPropagation}\n          >\n            Reset Arm\n          </Button>\n          <Button\n            size=\"lg\"\n            disabled={select || animate}\n            variant=\"primary\"\n            aria-label=\"Second group\"\n            onClick={this.startAnimation}\n            onMouseUp={this.stopPropagation}\n            onTouchEnd={this.stopPropagation}\n            onMouseDown={this.stopPropagation}\n            onTouchStart={this.stopPropagation}\n          >\n            Animate\n          </Button>\n          <Button\n            size=\"lg\"\n            disabled={select || !animate}\n            variant=\"primary\"\n            aria-label=\"Third group\"\n            onClick={this.stopAnimation}\n            onMouseUp={this.stopPropagation}\n            onTouchEnd={this.stopPropagation}\n            onMouseDown={this.stopPropagation}\n            onTouchStart={this.stopPropagation}\n          >\n            Stop\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AnimatePanel;\n","import { ReactNode } from 'react';\nexport const defaultFontBackground = '#ffffff';\nexport const redColor = '#ff0000';\nexport const greenColor = '#007000';\nexport const blueColor = '#00b0ff';\nexport const defSpriteParams: SpriteParam = {\n  fontsize: 100,\n  fontface: 'Roboto',\n  backgroundColor: defaultFontBackground,\n};\nexport const xParams: SpriteParam = {\n  fontsize: 100,\n  textColor: redColor,\n  borderColor: redColor,\n  backgroundColor: defaultFontBackground,\n};\nexport const yParams: SpriteParam = {\n  fontsize: 100,\n  textColor: greenColor,\n  borderColor: greenColor,\n  backgroundColor: defaultFontBackground,\n};\nexport const zParams: SpriteParam = {\n  fontsize: 100,\n  textColor: blueColor,\n  borderColor: blueColor,\n  backgroundColor: defaultFontBackground,\n};\nexport interface SpriteParam {\n  fontface?: string;\n  fontsize?: number;\n  borderThickness?: number;\n  borderColor?: string;\n  backgroundColor?: string;\n  textColor?: string;\n}\nexport interface RobotValue {\n  values: number[];\n}\nexport interface ThreeModelObjects {\n  scene: THREE.Scene;\n  camera: THREE.PerspectiveCamera;\n  renderer: THREE.WebGLRenderer;\n  joint: THREE.Group[];\n  jointAxisStart: THREE.Object3D[];\n  jointAxisEnd: THREE.Object3D[];\n  origins: THREE.Object3D[];\n  gripper: THREE.Object3D[];\n  gripperPositions: THREE.Object3D[];\n  endEffector: THREE.Mesh;\n  robotBase: THREE.Mesh;\n  labels: THREE.Sprite[];\n  axis: THREE.AxesHelper;\n  lines: THREE.Line[];\n  boundingBox1: THREE.Box3 | null;\n  boundingBox2: THREE.Box3 | null;\n}\nexport interface HUDDisplay {\n  camera: THREE.OrthographicCamera | null;\n  bitMap: CanvasRenderingContext2D;\n  sceneHUD: THREE.Scene;\n  texture: THREE.Texture | null;\n}\nexport const ControlConfig = [\n  {\n    label: 'Joint 1',\n    defaultVal: 0,\n    max: 135,\n    min: -135,\n    valUnit: '\\u00b0',\n  },\n  {\n    label: 'Joint 2',\n    defaultVal: 0,\n    max: 75,\n    min: -75,\n    valUnit: '\\u00b0',\n  },\n  {\n    label: 'Joint 3',\n    defaultVal: 0,\n    max: 135,\n    min: -135,\n    valUnit: '\\u00b0',\n  },\n  {\n    label: 'Joint 4',\n    defaultVal: 0,\n    max: 60,\n    min: -60,\n    valUnit: '\\u00b0',\n  },\n  { label: 'Gripper', defaultVal: 0, max: 100, min: 0, valUnit: '%' },\n];\nexport interface ControlsProps {\n  updateConfig(index: number, value: number): void;\n  displayAxis(value: boolean): void;\n  displayLabel(value: boolean): void;\n  resetPosition(): void;\n  receiveRobotValues(): number[];\n  startAnimation(robotValues: RobotValue[]): void;\n  stopAnimation(): void;\n  getEndEffectorYcor(): number;\n  effectorIntersect(): boolean;\n}\nexport interface Position {\n  x: number;\n  y: number;\n}\nexport interface ControlsState {\n  pos: Position;\n  portraitPos: Position;\n  landscapePos: Position;\n  dragging: boolean;\n  rel: Position;\n  backgroundColor: string;\n  width: string | number;\n  height: string | number;\n  overflow: string;\n  showControls: boolean;\n  showAxes: boolean;\n  animation: boolean;\n  showLabels: boolean;\n  robotValues: number[];\n}\nexport interface SliderConfig {\n  label: string;\n  defaultVal: number;\n  max: number;\n  min: number;\n  valUnit: string;\n}\nexport const defaultBackground = '#222831da';\nexport const backgroundHover = '#222831a0';\nexport interface AccordionProps {\n  children: {\n    header: ReactNode;\n    body: ReactNode;\n  };\n  selectItem(index: number): void;\n  deSelectItem(index: number): void;\n  onSelect: boolean;\n  index: number;\n}\n","import React from 'react';\nimport '../App.scss';\n\ninterface Props {\n  updateValue(index: number, value: number): void;\n  value: number;\n  index: number;\n  label: string;\n  disabled?: boolean;\n  defaultVal?: number;\n  max?: number;\n  min?: number;\n  valUnit?: string;\n  endEffectorYcor(): number;\n  effectorIntersect(): boolean;\n}\n// Stop propagation to parent div press, mouse events.\nconst stopPropagation = (\n  event:\n    | React.MouseEvent<HTMLInputElement, MouseEvent>\n    | React.TouchEvent<HTMLInputElement>\n    | React.MouseEvent<HTMLDivElement, MouseEvent>\n    | React.TouchEvent<HTMLDivElement>,\n) => {\n  event.stopPropagation();\n};\n\n/* Check if input numbers have opposite signs */\nconst oppositeSigns = (num1: number, num2: number): boolean =>\n  (num1 ^ num2) < 0;\n\n/* Handle changes in the slider. Updates the position of the owi-arm model. \nSlider movement is restricted based on the position of the robot arm end-effector.  */\nconst handleSliderChange = (\n  props: Props,\n  value: number,\n  setValue: React.Dispatch<React.SetStateAction<number>>,\n  changeDir: number,\n  setChangeDir: React.Dispatch<React.SetStateAction<number>>,\n) => (event: React.ChangeEvent<HTMLInputElement>) => {\n  const ypos = parseFloat(props.endEffectorYcor().toFixed(1));\n  const newValue = parseInt(event.target.value);\n  const intersecting = props.effectorIntersect();\n\n  // Allow slider movement if the end-effector does not intersect the base or y-position is positive\n  if (ypos >= 0.5 && !intersecting) {\n    setValue(newValue);\n    setChangeDir(newValue - value);\n    props.updateValue(props.index, newValue);\n  } else {\n    // Allow slider movement as long as the direction is opposite of the previous\n    if (oppositeSigns(newValue - value, changeDir)) {\n      props.updateValue(props.index, newValue);\n    }\n    // Allow horizontal movement if the y-position is on the 0 axis.\n    else if (props.index === 0 && !intersecting)\n      props.updateValue(props.index, newValue);\n  }\n\n  event.stopPropagation();\n  event.preventDefault();\n};\n/* Slider component */\nconst ValueSlider = React.memo((props: Props) => {\n  const [value, setValue] = React.useState(props.value);\n  const [changeDir, setChangeDir] = React.useState(0);\n  const valUnit = props.valUnit ? props.valUnit : '';\n  return (\n    <div className=\"slider-container\">\n      <div className=\"slider-label\">\n        <b>{props.label}</b>\n      </div>\n      <div\n        className=\"sliderDiv\"\n        onMouseDown={stopPropagation}\n        onMouseUp={stopPropagation}\n        onTouchStart={stopPropagation}\n        onTouchEnd={stopPropagation}\n      >\n        <input\n          className=\"slider\"\n          type=\"range\"\n          disabled={props.disabled ? true : false}\n          value={props.value}\n          onChange={handleSliderChange(\n            props,\n            value,\n            setValue,\n            changeDir,\n            setChangeDir,\n          )}\n          min={props.min ? props.min : 0}\n          max={props.max ? props.max : 0}\n          step={1}\n        />\n      </div>\n      <div className=\"slider-value\">\n        <b>{props.value + valUnit}</b>\n      </div>\n    </div>\n  );\n});\nexport default ValueSlider;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport '../App.scss';\nimport AnimatePanel from './AnimatePanel';\nimport {\n  backgroundHover,\n  ControlConfig,\n  ControlsProps,\n  ControlsState,\n  defaultBackground,\n  RobotValue,\n  SliderConfig,\n} from './constants';\nimport ValueSlider from './ValueSlider';\n\n/* Controls panel for the application. This panel can be dragged accros the screen. \nNote that it needs ot keep some flags in the state since the parent component 'ThreeContainer' \ndoes not rerender. As a result the variables cannot be passed as props.*/\nclass ModelControls extends React.Component<ControlsProps, ControlsState> {\n  containerRef: React.RefObject<HTMLDivElement>;\n  longPressTimeout: any;\n  onMobile: boolean;\n  constructor(props: any) {\n    super(props);\n    this.containerRef = React.createRef<HTMLDivElement>();\n    // Detect whether running on mobile or PC\n    if (\n      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n        navigator.userAgent,\n      )\n    ) {\n      this.onMobile = true;\n    } else this.onMobile = false;\n    // Set initial position on controls panel\n    const { innerHeight } = window;\n    this.state = {\n      dragging: false,\n      pos: { x: 0, y: 0 },\n      portraitPos: { x: 0, y: innerHeight * 0.55 },\n      landscapePos: { x: 0, y: 0 },\n      rel: { x: 0, y: 0 },\n      backgroundColor: defaultBackground,\n      width: '35%',\n      height: '100%',\n      overflow: 'auto',\n      showAxes: true,\n      showControls: true,\n      showLabels: true,\n      animation: false,\n      robotValues: [0, 0, 0, 0, 0],\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.resizeControls, false);\n    // Resize on Mobile devices\n    if (this.onMobile) {\n      this.resizeControls();\n    }\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.resizeControls);\n  }\n  /* Call back for resize event */\n  resizeControls = () => {\n    const isPortrait = window.matchMedia('(orientation: portrait)').matches;\n    if (this.onMobile) {\n      // Update position of the Controls Panel based on orientation\n      this.setState({\n        pos: isPortrait ? this.state.portraitPos : this.state.landscapePos,\n        backgroundColor: defaultBackground,\n        width: isPortrait ? '100%' : '45%',\n        height: isPortrait ? '45%' : '100%',\n      });\n      window.scrollTo(0, 0);\n    } else {\n      if (this.containerRef.current) {\n        // get width of the Controls Panel and left position\n        const { offsetWidth, offsetLeft } = this.containerRef.current;\n        const { innerWidth } = window;\n        const xDelta = innerWidth - offsetWidth;\n\n        // Push the Controls Panel left as window gets smaller\n        this.setState({\n          pos: {\n            x: offsetLeft >= xDelta ? xDelta : offsetLeft,\n            y: 0,\n          },\n          backgroundColor: defaultBackground,\n        });\n      }\n    }\n  };\n  /* Update the color of the Controls Panel to communicate dragging.*/\n  onMouseDown = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (event.button !== 0) return;\n    const top = event.currentTarget.offsetTop;\n    const left = event.currentTarget.offsetLeft;\n    const { pageX, pageY } = event;\n    const newPosition = {\n      x: pageX - left,\n      y: pageY - top,\n    };\n    event.currentTarget.style.cursor = 'move';\n    // Update the background color and set dragging flag to allow movement\n    this.setState({\n      dragging: true,\n      rel: newPosition,\n      backgroundColor: backgroundHover,\n    });\n    event.stopPropagation();\n  };\n  /* Update the position of the Controls Panel on move event */\n  onMouseMove = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!this.state.dragging) return;\n\n    const { innerHeight, innerWidth } = window;\n    const { offsetWidth, offsetHeight } = event.currentTarget;\n\n    let newX = event.pageX - this.state.rel.x;\n    let newY = event.pageY - this.state.rel.y;\n\n    // Check for the div to be within the viewport\n    if (newX < 0) newX = 0;\n    else if (newX > innerWidth - offsetWidth) newX = innerWidth - offsetWidth;\n    if (newY < 0) newY = 0;\n    else if (newY > innerHeight - offsetHeight)\n      newY = innerHeight - offsetHeight;\n\n    // Update the position of the div\n    this.setState({\n      pos: {\n        x: newX,\n        y: newY,\n      },\n    });\n\n    event.stopPropagation();\n  };\n  /* Reset the background color of the Controls Panel and dragging flag. */\n  onMouseUp = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    event.currentTarget.style.cursor = 'auto';\n    this.setState({ dragging: false, backgroundColor: defaultBackground });\n    event.stopPropagation();\n  };\n  /* Cancel the movement when the mouse icon exits the panel. */\n  onMouseLeave = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    event.currentTarget.style.cursor = 'auto';\n    this.setState({ dragging: false, backgroundColor: defaultBackground });\n    event.stopPropagation();\n  };\n\n  /*  Update the the background and enable dragging*/\n  onTouchStart = (event: React.TouchEvent<HTMLDivElement>) => {\n    const top = event.currentTarget.offsetTop;\n    const left = event.currentTarget.offsetLeft;\n    const { pageX, pageY } = event.touches[0];\n    this.longPressTimeout = setTimeout(() => {\n      this.setState({\n        dragging: true,\n        rel: {\n          x: pageX - left,\n          y: pageY - top,\n        },\n        backgroundColor: backgroundHover,\n        overflow: 'hidden',\n      });\n    }, 300);\n    event.stopPropagation();\n  };\n\n  /* Update the position object based on orientation and reset the background color and dragging flag */\n  onTouchEnd = (event: React.TouchEvent<HTMLDivElement>) => {\n    const isPortrait = window.matchMedia('(orientation: portrait)').matches;\n    if (isPortrait) {\n      this.setState({\n        dragging: false,\n        backgroundColor: defaultBackground,\n        portraitPos: this.state.pos,\n        overflow: 'auto',\n      });\n    } else {\n      this.setState({\n        dragging: false,\n        backgroundColor: defaultBackground,\n        landscapePos: this.state.pos,\n        overflow: 'auto',\n      });\n    }\n\n    event.stopPropagation();\n  };\n  /* Update the postiion of the Controls Panel */\n  onTouchMove = (event: React.TouchEvent<HTMLDivElement>) => {\n    if (!this.state.dragging) {\n      clearTimeout(this.longPressTimeout);\n      return;\n    }\n    const { pageX, pageY } = event.touches[0];\n    const { innerHeight, innerWidth } = window;\n    const { offsetWidth, offsetHeight } = event.currentTarget;\n\n    let newX = pageX - this.state.rel.x;\n    let newY = pageY - this.state.rel.y;\n    // Verify that the panel is in the viewport\n    if (newX < 0) newX = 0;\n    else if (newX > innerWidth - offsetWidth) newX = innerWidth - offsetWidth;\n    if (newY < 0) newY = 0;\n    else if (newY > innerHeight - offsetHeight)\n      newY = innerHeight - offsetHeight;\n    this.setState({\n      pos: {\n        x: newX,\n        y: newY,\n      },\n    });\n    event.stopPropagation();\n  };\n  // Hide the Controls Panel\n  toggleControls = (\n    event:\n      | React.MouseEvent<HTMLButtonElement, MouseEvent>\n      | React.TouchEvent<HTMLButtonElement>,\n  ) => {\n    this.setState({ showControls: !this.state.showControls });\n    event.currentTarget.blur();\n    event.stopPropagation();\n    event.preventDefault();\n  };\n  // Toggle the Axis on the model\n  toggleAxes = (\n    event:\n      | React.MouseEvent<HTMLButtonElement, MouseEvent>\n      | React.TouchEvent<HTMLButtonElement>,\n  ) => {\n    event.currentTarget.blur();\n    this.props.displayAxis(!this.state.showAxes);\n    this.setState({ showAxes: !this.state.showAxes });\n    event.stopPropagation();\n  };\n  // Toggle the Labels on the model\n  toggleLabels = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.currentTarget.blur();\n    const label = !this.state.showLabels;\n    this.setState({ showLabels: label });\n    this.props.displayLabel(label);\n    event.stopPropagation();\n  };\n  // Run the callback to start the animation via ThreeContainer\n  startAnimation = (robotValues: RobotValue[]) => {\n    this.props.startAnimation(robotValues);\n    this.setState({ animation: true });\n  };\n  // Run the callback to stop the animation via ThreeContainer\n  stopAnimation = () => {\n    this.setState({ animation: false });\n    this.props.stopAnimation();\n  };\n  /* Show the controls panel. Called on by a click on the \"show-controls\" div*/\n  showControls = (\n    event:\n      | React.TouchEvent<HTMLDivElement>\n      | React.MouseEvent<HTMLDivElement, MouseEvent>,\n  ) => {\n    this.setState({\n      showControls: true,\n      backgroundColor: defaultBackground,\n    });\n    event.stopPropagation();\n  };\n  /* Written to stop propagation on either mouse or touch events. This needs to \n  be added to any clickable/pressable object, otherwise the event will propagate\n  up to the draggable control panel.                                            */\n  stopPropagation = (\n    event:\n      | React.MouseEvent<HTMLButtonElement, MouseEvent>\n      | React.TouchEvent<HTMLButtonElement>,\n  ) => {\n    event.stopPropagation();\n  };\n  /* Updates the background on the \"show-controls\" div when pressing down*/\n  pressShowControls = (event: React.TouchEvent<HTMLDivElement>) => {\n    console.log('button event start');\n    this.setState({ backgroundColor: backgroundHover });\n    event.stopPropagation();\n  };\n  /* Update state to store slider values, as well as use parent callback to update\n  the threejs model of the owi arm                                                */\n  updateArmConfig = (index: number, value: number): void => {\n    const config = this.state.robotValues.slice();\n    config[index] = value;\n    this.setState({ robotValues: config });\n    this.props.updateConfig(index, value);\n  };\n  /* Show slider components */\n  renderSlider = (config: SliderConfig, index: number) => (\n    <ValueSlider\n      disabled={this.state.animation}\n      value={this.state.robotValues[index]}\n      key={index}\n      {...config}\n      updateValue={this.updateArmConfig}\n      index={index}\n      endEffectorYcor={this.props.getEndEffectorYcor}\n      effectorIntersect={this.props.effectorIntersect}\n    />\n  );\n  /* Reset the sliders to 0, and use callback to reset the position of the owi arm*/\n  resetPosition = () => {\n    this.props.resetPosition();\n    this.setState({ robotValues: [0, 0, 0, 0, 0] });\n  };\n  render() {\n    return (\n      <div>\n        <div\n          ref={this.containerRef}\n          className=\"controls disable-selection\"\n          onMouseDown={this.onMouseDown}\n          onMouseMove={this.onMouseMove}\n          onMouseUp={this.onMouseUp}\n          onMouseLeave={this.onMouseLeave}\n          onTouchStart={this.onTouchStart}\n          onTouchMove={this.onTouchMove}\n          onTouchEnd={this.onTouchEnd}\n          unselectable=\"on\"\n          style={{\n            left: this.state.pos.x + 'px',\n            top: this.state.pos.y + 'px',\n            width: this.state.width,\n            height: this.state.height,\n            backgroundColor: this.state.backgroundColor,\n            minWidth: this.onMobile ? undefined : 400,\n            overflow: this.state.overflow,\n            display: this.state.showControls ? 'block' : 'none',\n          }}\n        >\n          <h1>OWI Robot Arm: Controls</h1>\n          <p id=\"text\">\n            Use the sliders move the associated robot arm joints. Click, touch,\n            drag or scroll on the model screen to transform the display. Press\n            and hold to drag the panel.\n          </p>\n          {ControlConfig.map(this.renderSlider)}\n          <div className=\"button-container\">\n            <Button\n              size=\"lg\"\n              disabled={this.state.animation}\n              variant=\"primary\"\n              aria-label=\"First group\"\n              onClick={this.toggleControls}\n              onMouseUp={this.stopPropagation}\n              onTouchEnd={this.stopPropagation}\n              onMouseDown={this.stopPropagation}\n              onTouchStart={this.stopPropagation}\n            >\n              Hide Controls\n            </Button>\n\n            <Button\n              size=\"lg\"\n              variant=\"primary\"\n              disabled={this.state.animation}\n              aria-label=\"Second group\"\n              onClick={this.toggleAxes}\n              onMouseDown={this.stopPropagation}\n              onTouchStart={this.stopPropagation}\n              onMouseUp={this.stopPropagation}\n              onTouchEnd={this.stopPropagation}\n            >\n              {this.state.showAxes ? 'Hide Axes' : 'Show Axes'}\n            </Button>\n\n            <Button\n              size=\"lg\"\n              disabled={this.state.animation}\n              variant=\"primary\"\n              aria-label=\"Third group\"\n              onClick={this.toggleLabels}\n              onMouseDown={this.stopPropagation}\n              onMouseUp={this.stopPropagation}\n              onTouchStart={this.stopPropagation}\n              onTouchEnd={this.stopPropagation}\n            >\n              {this.state.showLabels ? 'Hide Labels' : 'Show Labels'}\n            </Button>\n          </div>\n          <AnimatePanel\n            resetPosition={this.resetPosition}\n            receiveRobotValues={this.props.receiveRobotValues}\n            startAnimation={this.startAnimation}\n            stopAnimation={this.stopAnimation}\n            animate={this.state.animation}\n          />\n        </div>\n        <div\n          className={'show-controls disable-selection'}\n          style={{\n            display: this.state.showControls ? 'none' : 'block',\n            backgroundColor: this.state.backgroundColor,\n          }}\n          onClick={this.showControls}\n          onTouchEnd={this.showControls}\n          onTouchStart={this.pressShowControls}\n        >\n          <h4>Show Controls</h4>\n        </div>\n      </div>\n    );\n  }\n}\nexport default ModelControls;\n","import * as THREE from 'three';\nimport FONT from 'three/examples/fonts/helvetiker_regular.typeface.json';\nimport {\n  defSpriteParams,\n  SpriteParam,\n  ThreeModelObjects,\n  xParams,\n  yParams,\n  zParams,\n} from './constants';\nimport { blackMat, yMat } from './ThreeContainer';\n\nconst createCylinder = (radius: number, height: number) => {\n  return new THREE.CylinderGeometry(radius, radius, height, 30);\n};\nexport const createBox = (width: number, height: number, depth: number) => {\n  return new THREE.BoxGeometry(width, height, depth);\n};\n\n/* Add a border to a canvas texture */\nconst roundRect = (\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n  r: number,\n) => {\n  ctx.beginPath();\n  ctx.moveTo(x + r, y);\n  ctx.lineTo(x + w + 30 - r, y);\n  ctx.quadraticCurveTo(x + w + 30, y, x + w + 30, y + r);\n  ctx.lineTo(x + w + 30, y + h - r);\n  ctx.quadraticCurveTo(x + w + 30, y + h, x + w + 30 - r, y + h);\n  ctx.lineTo(x + r, y + h);\n  ctx.quadraticCurveTo(x, y + h, x, y + h - r);\n  ctx.lineTo(x, y + r);\n  ctx.quadraticCurveTo(x, y, x + r, y);\n  ctx.closePath();\n  ctx.fill();\n  ctx.stroke();\n};\n\n/* Create a text sprite to add to three.js scene */\nconst makeTextSprite = (\n  message: string,\n  params: SpriteParam,\n  x: number,\n  y: number,\n  z: number,\n): THREE.Sprite => {\n  const fontface = params.fontface ? params.fontface : 'Arial';\n  const fontsize = params.fontsize ? params.fontsize : 18;\n  const borderThickness = params.borderThickness ? params.borderThickness : 4;\n  const borderColor = params.borderColor ? params.borderColor : '#000000';\n  const backgroundColor = params.backgroundColor\n    ? params.backgroundColor\n    : '#ffffff00';\n  const textColor = params.textColor ? params.textColor : '#000000';\n\n  const canvas = document.createElement('canvas');\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const context = canvas.getContext('2d')!;\n  canvas.width = 400;\n  canvas.height = 200;\n  context.font = 'Bold ' + fontsize + 'px ' + fontface;\n  const metrics = context.measureText(message);\n  const textWidth = metrics.width;\n\n  context.fillStyle = backgroundColor;\n  context.strokeStyle = borderColor;\n\n  context.lineWidth = borderThickness;\n  roundRect(\n    context,\n    borderThickness / 2,\n    borderThickness / 2,\n    textWidth + borderThickness,\n    fontsize * 1.4 + borderThickness,\n    20,\n  );\n\n  context.fillStyle = textColor;\n\n  context.fillText(message, borderThickness + 15, fontsize + borderThickness);\n\n  const texture = new THREE.Texture(canvas);\n  texture.minFilter = THREE.LinearFilter;\n  texture.needsUpdate = true;\n\n  const spriteMaterial = new THREE.SpriteMaterial({\n    map: texture,\n    premultipliedAlpha: true,\n    dithering: false,\n    transparent: true,\n  });\n  spriteMaterial.precision = 'highp';\n  spriteMaterial.depthWrite = false;\n  const sprite = new THREE.Sprite(spriteMaterial);\n  sprite.scale.set(8, 4, 1.0);\n  sprite.center.set(0.1, 0.65);\n\n  sprite.position.set(x, y, z);\n  return sprite;\n};\n\nexport const constructJoint1 = (object: ThreeModelObjects) => {\n  // Constructor Robot Arm base\n  const base = new THREE.Group();\n  const baseCylinder = [];\n  baseCylinder.push(new THREE.Mesh(createCylinder(4, 1), blackMat));\n  baseCylinder[0].position.set(0, 0.5, 0);\n  baseCylinder.push(new THREE.Mesh(createCylinder(4, 2), yMat));\n  baseCylinder[1].position.set(0, 2, 0);\n  baseCylinder.push(new THREE.Mesh(createCylinder(4, 1), blackMat));\n  baseCylinder[2].position.set(0, 3.5, 0);\n  baseCylinder.forEach((cylinder) => base.add(cylinder));\n\n  const baseBox = [];\n  baseBox.push(new THREE.Mesh(createBox(12, 4, 6), blackMat));\n  baseBox[0].position.set(6, 2, 0);\n  baseBox.push(new THREE.Mesh(createBox(6, 0.5, 4), yMat));\n  baseBox[1].position.set(8, 4.25, 0);\n  base.add(baseBox[0]);\n  base.add(baseBox[1]);\n  object.scene.add(base);\n  base.rotateY(Math.PI / 2);\n  object.joint[0].rotateY(Math.PI / 2);\n  // Construct joint[0]\n  const joint2Base = new THREE.Mesh(createBox(3, 3, 3), yMat);\n  joint2Base.position.set(0, 5.5, 0);\n  object.joint[0].add(joint2Base);\n\n  const jointCylinder = [];\n  jointCylinder.push(new THREE.Mesh(createCylinder(1.25, 0.5), blackMat));\n  jointCylinder[0].rotateX(Math.PI / 2);\n  jointCylinder[0].position.set(0, 5.5, -1.75);\n  jointCylinder.push(new THREE.Mesh(createCylinder(1.25, 0.5), blackMat));\n  jointCylinder[1].rotateX(Math.PI / 2);\n  jointCylinder[1].position.set(0, 5.5, 1.75);\n\n  object.joint[0].add(jointCylinder[0]);\n  object.joint[0].add(jointCylinder[1]);\n  object.robotBase.position.set(0, 2, -4);\n  object.scene.add(object.robotBase);\n};\nexport const constructJoint2 = (object: ThreeModelObjects) => {\n  const joint2Bar = [];\n  const jointCylinder = [];\n  joint2Bar.push(new THREE.Mesh(createBox(1.5, 8, 0.5), blackMat));\n  joint2Bar[0].position.set(0, 9.5, -1.75);\n  joint2Bar.push(new THREE.Mesh(createBox(1.5, 8, 0.5), blackMat));\n  joint2Bar[1].position.set(0, 9.5, 1.75);\n  joint2Bar.forEach((value) => object.joint[1].add(value));\n  jointCylinder.push(new THREE.Mesh(createCylinder(1.25, 0.5), blackMat));\n  jointCylinder[0].rotateX(Math.PI / 2);\n  jointCylinder[0].position.set(0, 13.5, 1.75);\n  jointCylinder.push(new THREE.Mesh(createCylinder(1.25, 0.5), blackMat));\n  jointCylinder[1].rotateX(Math.PI / 2);\n  jointCylinder[1].position.set(0, 13.5, -1.75);\n  object.joint[1].add(jointCylinder[0]);\n  object.joint[1].add(jointCylinder[1]);\n\n  // Position the first join axis objects to joint[1]\n  object.jointAxisStart[0].position.set(0, 5.5, -5);\n  object.jointAxisEnd[0].position.set(0, 5.5, 5);\n  object.origins[0].position.set(0, 5.5, 0);\n  object.joint[1].add(object.jointAxisStart[0]);\n  object.joint[1].add(object.jointAxisEnd[0]);\n  object.joint[1].add(object.origins[0]);\n};\nexport const constructJoint3 = (object: ThreeModelObjects) => {\n  const armBody = new THREE.Mesh(createBox(3, 8, 3), yMat);\n  armBody.position.set(0, 16, 0);\n  object.joint[2].add(armBody);\n\n  const armBodyCover = [];\n  armBodyCover.push(new THREE.Mesh(createBox(0.25, 6, 2.5), blackMat));\n  armBodyCover[0].position.set(-1.625, 16, 0);\n  object.joint[2].add(armBodyCover[0]);\n  armBodyCover.push(new THREE.Mesh(createBox(0.25, 6, 2.5), blackMat));\n  armBodyCover[1].position.set(1.625, 16, 0);\n  object.joint[2].add(armBodyCover[1]);\n\n  const jointCylinder = [];\n  jointCylinder.push(new THREE.Mesh(createCylinder(1.25, 0.5), blackMat));\n  jointCylinder[0].rotateX(Math.PI / 2);\n  jointCylinder[0].position.set(0, 18.5, 1.75);\n  jointCylinder.push(new THREE.Mesh(createCylinder(1.25, 0.5), blackMat));\n  jointCylinder[1].rotateX(Math.PI / 2);\n  jointCylinder[1].position.set(0, 18.5, -1.75);\n  object.joint[2].add(jointCylinder[0]);\n  object.joint[2].add(jointCylinder[1]);\n\n  // Position the second join axis objects to joint[2]\n  object.jointAxisStart[1].position.set(0, 13.5, -5);\n  object.jointAxisEnd[1].position.set(0, 13.5, 5);\n  object.origins[1].position.set(0, 13.5, 0);\n  object.joint[2].add(object.jointAxisStart[1]);\n  object.joint[2].add(object.jointAxisEnd[1]);\n  object.joint[2].add(object.origins[1]);\n};\nexport const constructJoint4 = (object: ThreeModelObjects) => {\n  const jointCylinder = [];\n  jointCylinder.push(new THREE.Mesh(createCylinder(1.25, 3), blackMat));\n  jointCylinder[0].rotateX(Math.PI / 2);\n  jointCylinder[0].position.set(0, 21.5, 0);\n  object.joint[3].add(jointCylinder[0]);\n\n  const baseBox = [];\n  baseBox.push(new THREE.Mesh(createBox(2.5, 2.5, 0.5), blackMat));\n  baseBox[0].position.set(0, 21.5, -1.75);\n  baseBox.push(new THREE.Mesh(createBox(2.5, 2.5, 0.5), blackMat));\n  baseBox[1].position.set(0, 21.5, 1.75);\n  baseBox.push(new THREE.Mesh(createBox(2.5, 0.5, 3), blackMat));\n  baseBox[2].position.set(0, 23, 0);\n  object.joint[3].add(baseBox[0]);\n  object.joint[3].add(baseBox[1]);\n  object.joint[3].add(baseBox[2]);\n\n  // Position the third join axis objects to joint[3]\n  object.jointAxisStart[2].position.set(0, 18.5, -5);\n  object.jointAxisEnd[2].position.set(0, 18.5, 5);\n  object.origins[2].position.set(0, 18.5, 0);\n  object.joint[3].add(object.jointAxisStart[2]);\n  object.joint[3].add(object.jointAxisEnd[2]);\n  object.joint[3].add(object.origins[2]);\n};\nexport const constructGripper = (object: ThreeModelObjects) => {\n  object.gripper.push(new THREE.Mesh(createBox(0.7, 6, 0.7), blackMat));\n  object.gripper[0].position.set(0, 23.5, -0.7);\n  object.gripper.push(new THREE.Mesh(createBox(0.7, 6, 0.7), blackMat));\n  object.gripper[1].position.set(0, 23.5, 0.7);\n\n  object.gripper.forEach((value) => object.joint[3].add(value));\n  object.gripperPositions[0].position.set(0, 23.5, -0.15);\n  object.gripperPositions[1].position.set(0, 23.5, -0.7);\n  object.gripperPositions[2].position.set(0, 23.5, 0.15);\n  object.gripperPositions[3].position.set(0, 23.5, 0.7);\n  object.endEffector.position.set(0, 26.5, 0);\n  object.joint[3].add(object.endEffector);\n  object.gripperPositions.forEach((value) => object.joint[3].add(value));\n};\nexport const createLabels = (object: ThreeModelObjects) => {\n  // Create joint labels\n  object.labels.push(makeTextSprite('Joint 1', defSpriteParams, -12.5, 2.5, 0));\n  object.scene.add(object.labels[0]);\n  object.labels.push(makeTextSprite('Joint 2', defSpriteParams, 0, 5.5, 10.5));\n  object.labels[1].rotateY(-Math.PI / 2);\n  object.joint[0].add(object.labels[1]);\n  object.labels.push(makeTextSprite('Joint 3', defSpriteParams, 0, 13.5, 10.5));\n  object.joint[1].add(object.labels[2]);\n  object.labels.push(makeTextSprite('Joint 4', defSpriteParams, 0, 18.5, 10.5));\n  object.joint[2].add(object.labels[3]);\n  object.labels.push(makeTextSprite('Gripper', defSpriteParams, 0, 23.5, 8.5));\n  object.joint[3].add(object.labels[4]);\n  object.labels.push(makeTextSprite('x', xParams, 30, 0, 0));\n  object.labels.push(makeTextSprite('y', yParams, 0, 30, 0));\n  object.labels.push(makeTextSprite('z', zParams, 0, 0, 30));\n\n  object.scene.add(object.labels[5]);\n  object.scene.add(object.labels[6]);\n  object.scene.add(object.labels[7]);\n\n  // Create Lines\n  const points = [];\n  points.push(new THREE.Vector3(0, 2.5, 0));\n  points.push(new THREE.Vector3(-12.5, 2.5, 0));\n  object.lines.push(\n    new THREE.Line(\n      new THREE.BufferGeometry().setFromPoints([points[0], points[1]]),\n      new THREE.LineBasicMaterial({ color: 0x3b3b3b }),\n    ),\n  );\n  object.scene.add(object.lines[0]);\n  points.push(new THREE.Vector3(0, 5.5, 0));\n  points.push(new THREE.Vector3(0, 5.5, 9.75));\n  object.lines.push(\n    new THREE.Line(\n      new THREE.BufferGeometry().setFromPoints([points[2], points[3]]),\n      new THREE.LineBasicMaterial({ color: 0x3b3b3b }),\n    ),\n  );\n  object.joint[1].add(object.lines[1]);\n\n  points.push(new THREE.Vector3(0, 18.5, 0));\n  points.push(new THREE.Vector3(0, 18.5, 9.75));\n  object.lines.push(\n    new THREE.Line(\n      new THREE.BufferGeometry().setFromPoints([points[4], points[5]]),\n      new THREE.LineBasicMaterial({ color: 0x3b3b3b }),\n    ),\n  );\n  object.joint[2].add(object.lines[2]);\n\n  points.push(new THREE.Vector3(0, 13.5, 0));\n  points.push(new THREE.Vector3(0, 13.5, 9.75));\n  object.lines.push(\n    new THREE.Line(\n      new THREE.BufferGeometry().setFromPoints([points[6], points[7]]),\n      new THREE.LineBasicMaterial({ color: 0x3b3b3b }),\n    ),\n  );\n  object.joint[2].add(object.lines[3]);\n  points.push(new THREE.Vector3(0, 22.5, 0));\n  points.push(new THREE.Vector3(0, 22.5, 7.95));\n  object.lines.push(\n    new THREE.Line(\n      new THREE.BufferGeometry().setFromPoints([points[8], points[9]]),\n      new THREE.LineBasicMaterial({ color: 0x3b3b3b }),\n    ),\n  );\n  object.joint[3].add(object.lines[4]);\n};\n/* Add grid axes and set the camera */\nexport const createDisplay = (object: ThreeModelObjects): void => {\n  object.scene.add(object.axis);\n\n  // Add a grid on the xz plane\n  const gridhelper = new THREE.GridHelper(60, 60);\n  object.scene.add(gridhelper);\n\n  // Set camera\n  object.camera?.position.set(0, 33, 40);\n  object.camera?.lookAt(object.scene.position);\n};\nexport const addText = (\n  message: string,\n  x: number,\n  y: number,\n  z: number,\n  size: number,\n  color: number,\n) => {\n  const loader = new THREE.FontLoader();\n  const font = loader.parse(FONT);\n\n  const matDark = new THREE.LineBasicMaterial({\n    color: color,\n    side: THREE.DoubleSide,\n  });\n\n  const shapes = font.generateShapes(message, size);\n\n  const geometry = new THREE.ShapeBufferGeometry(shapes);\n\n  const vec = new THREE.Vector3();\n\n  const text = new THREE.Mesh(geometry, matDark);\n  text.geometry.computeBoundingBox();\n  text.geometry.boundingBox?.getCenter(vec);\n  text.geometry.center();\n  text.position.copy(vec);\n  text.position.set(x, y, z);\n  return text;\n};\n","import React, { Component } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport '../App.scss';\nimport { RobotValue, ThreeModelObjects } from './constants';\nimport ModelControls from './ModelControls';\nimport {\n  constructGripper,\n  constructJoint1,\n  constructJoint2,\n  constructJoint3,\n  constructJoint4,\n  createBox,\n  createDisplay,\n  createLabels,\n} from './ModelGeneratorFunctions';\ninterface Props {\n  active?: boolean;\n}\ninterface State {\n  robotValues: number[];\n  positionSeq: RobotValue[];\n  showAxis: boolean;\n  showLabels: boolean;\n  animation: boolean;\n}\nconst transparentMat = new THREE.MeshBasicMaterial({\n  color: 0xffffff,\n  transparent: true,\n  opacity: 0,\n});\nconst frames = 100;\nexport const yMat = new THREE.MeshStandardMaterial({ color: 0xffdf20 });\nexport const blackMat = new THREE.MeshStandardMaterial({ color: 0x000000 });\n\nexport default class ThreeContainer extends Component<Props, State> {\n  threeRootElement = React.createRef<HTMLDivElement>();\n  canvasRef = React.createRef<HTMLCanvasElement>();\n  canvasCtx: CanvasRenderingContext2D | null;\n  plane: THREE.Mesh | null;\n  frameId = 0;\n  light = new THREE.PointLight(0xffffff);\n  prevState: State = {\n    robotValues: [0, 0, 0, 0, 0],\n    showAxis: true,\n    showLabels: true,\n    animation: false,\n    positionSeq: [],\n  };\n  rotateFuncs: any[];\n  handles: ThreeModelObjects = {\n    scene: new THREE.Scene(),\n    camera: new THREE.PerspectiveCamera(75, 1, 0.1, 1000),\n    renderer: new THREE.WebGLRenderer({\n      antialias: true,\n    }),\n    joint: [],\n    jointAxisStart: [],\n    jointAxisEnd: [],\n    origins: [],\n    gripper: [],\n    gripperPositions: [],\n    endEffector: new THREE.Mesh(createBox(0.5, 0.5, 0.5), transparentMat),\n    robotBase: new THREE.Mesh(createBox(8, 5, 16), transparentMat),\n    labels: [],\n    axis: new THREE.AxesHelper(30),\n    boundingBox1: null,\n    boundingBox2: null,\n    lines: [],\n  };\n  controls = new OrbitControls(\n    this.handles.camera,\n    this.handles.renderer.domElement,\n  );\n  worldPos = new THREE.Vector3();\n  crtIndex = 0;\n  nextIndex = 0;\n  angleDelta = [0, 0, 0, 0, 0];\n  newPosition = [0, 0, 0, 0, 0];\n  frameCount = 0;\n\n  constructor(props: any) {\n    super(props);\n    this.state = this.prevState;\n    this.plane = null;\n    //Set the lightsource\n    this.light.position.set(-5, 5, 5);\n    this.handles.scene.add(this.light);\n    this.handles.renderer.setPixelRatio(window.devicePixelRatio);\n    this.canvasCtx = null;\n    this.controls.update();\n    // Use the join axis arrays to calculate the rotation axis for joints\n    this.rotateFuncs = [\n      this.rotateJoint1,\n      this.rotateJoint2,\n      this.rotateJoint3,\n      this.rotateJoint4,\n      this.updateGripper,\n    ];\n    // Create the groups and objects used to calculate rotation axes\n    for (let i = 0; i < 4; i++) {\n      this.handles.joint.push(new THREE.Group());\n      this.handles.gripperPositions.push(new THREE.Object3D());\n      if (i < 3) {\n        this.handles.jointAxisStart.push(new THREE.Object3D());\n        this.handles.jointAxisEnd.push(new THREE.Object3D());\n        this.handles.origins.push(new THREE.Object3D());\n      }\n    }\n  }\n\n  componentDidMount() {\n    if (this.threeRootElement.current) {\n      // Add the canvas to the parent div element\n      this.threeRootElement.current.appendChild(\n        this.handles.renderer.domElement,\n      );\n      // Set camera and canvas sizing\n      const { clientHeight, clientWidth } = this.threeRootElement.current;\n      this.handles.renderer.setClearColor(0xd6d6d6, 1);\n      this.handles.renderer.setSize(clientWidth, clientHeight);\n      this.handles.camera.aspect = clientWidth / clientHeight;\n      this.handles.camera.updateProjectionMatrix();\n    }\n    this.canvasCtx = this.canvasRef.current?.getContext(\n      '2d',\n    ) as CanvasRenderingContext2D;\n\n    // Add the groups to the scene\n    this.handles.joint[2].add(this.handles.joint[3]);\n    this.handles.joint[1].add(this.handles.joint[2]);\n    this.handles.joint[0].add(this.handles.joint[1]);\n    this.handles.scene.add(this.handles.joint[0]);\n\n    // Constructor the owi arm model\n    constructJoint1(this.handles);\n    constructJoint2(this.handles);\n    constructJoint3(this.handles);\n    constructJoint4(this.handles);\n    constructGripper(this.handles);\n    createLabels(this.handles);\n    createDisplay(this.handles);\n    this.createBoundingBoxes();\n    window.addEventListener('resize', this.onSizeChange, false);\n    this.start();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onSizeChange);\n  }\n  /* Create the bounding boxes which will be used to detect intersections*/\n  createBoundingBoxes = () => {\n    this.handles.endEffector.geometry.computeBoundingBox();\n    this.handles.robotBase.geometry.computeBoundingBox();\n    this.handles.boundingBox1 = new THREE.Box3();\n    this.handles.boundingBox2 = new THREE.Box3();\n    this.handles.boundingBox1?.setFromObject(this.handles.robotBase);\n    this.handles.boundingBox2?.setFromObject(this.handles.endEffector);\n  };\n  /* Detect if the end-effector position is intersecting the robotBase bounding box*/\n  endEffectorIntersect = (): boolean => {\n    return this.handles.boundingBox1?.containsPoint(\n      this.endEffectorCoordinates(),\n    ) as boolean;\n  };\n  /* The canvas does not need to re-render. The ThreeContainer component only \n  needs to receive the updated state data for the THREE animation loop to update\n  positioning. */\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    this.rotateFuncs.forEach((rotate, index) => {\n      if (nextState.robotValues[index] !== this.prevState.robotValues[index]) {\n        rotate(nextState.robotValues[index], this.prevState.robotValues[index]);\n        this.prevState.robotValues[index] = nextState.robotValues[index];\n      }\n    });\n    if (nextState.showAxis !== this.prevState.showAxis) {\n      this.updateAxesVisibility(nextState.showAxis);\n      this.prevState.showAxis = nextState.showAxis;\n    }\n    if (nextState.showLabels !== this.prevState.showLabels) {\n      this.displayLabelVisibility(nextState.showLabels);\n      this.prevState.showLabels = nextState.showLabels;\n    }\n    return false;\n  }\n  /* Callback passed to children sliders to update the owi arm angle/position */\n  updateArmConfig = (index: number, value: number): void => {\n    const config = this.state.robotValues.slice();\n    config[index] = value;\n    this.setState({ robotValues: config });\n  };\n  displayAxis = (value: boolean): void => {\n    this.setState({ showAxis: value });\n  };\n  displayLabel = (value: boolean): void => {\n    this.setState({ showLabels: value });\n  };\n  /* Start showing the movement between positions loaded to state.positionSeq */\n  startAnimation = (robotValues: RobotValue[]) => {\n    if (robotValues.length !== 0) {\n      this.newPosition = [...robotValues[0].values];\n      this.angleDelta = [0, 0, 0, 0, 0];\n      this.crtIndex = 0;\n      this.nextIndex = 1;\n      this.frameCount = 0;\n      this.setState({\n        animation: true,\n        positionSeq: [...robotValues],\n        robotValues: [...robotValues[0].values],\n      });\n    }\n  };\n  /* Stop the position animation loop */\n  stopAnimation = () => {\n    this.setState({ animation: false });\n    this.resetPosition();\n  };\n  /* Update the canvas size on window size changes */\n  onSizeChange = () => {\n    if (this.threeRootElement.current) {\n      const { clientWidth, clientHeight } = this.threeRootElement.current;\n      this.handles.renderer.setSize(clientWidth, clientHeight, true);\n      this.handles.camera.aspect = clientWidth / clientHeight;\n      this.handles.camera.updateProjectionMatrix();\n    }\n  };\n  /* Callback passed to children to give access to robotValues in state. */\n  sendRobotValues = () => {\n    return this.state.robotValues;\n  };\n  /* Fucntions used to rotate the owi arm at each joint */\n  rotateJoint1 = (newAngle: number, prevAngle: number) => {\n    const angle = this.rad(newAngle - prevAngle);\n    this.handles.joint[0].rotateY(angle);\n  };\n  rotateJoint2 = (newAngle: number, prevAngle: number) => {\n    const angle = this.rad(newAngle - prevAngle);\n    const axis = this.handles.jointAxisStart[0].position\n      .clone()\n      .sub(this.handles.jointAxisEnd[0].position);\n    const point = this.handles.origins[0].position;\n    this.rotate(this.handles.joint[1], point, axis, angle);\n  };\n\n  rotateJoint3 = (newAngle: number, prevAngle: number) => {\n    const angle = this.rad(newAngle - prevAngle);\n    const axis = this.handles.jointAxisStart[1].position\n      .clone()\n      .sub(this.handles.jointAxisEnd[1].position);\n    const point = this.handles.origins[1].position;\n    this.rotate(this.handles.joint[2], point, axis, angle);\n  };\n  rotateJoint4 = (newAngle: number, prevAngle: number) => {\n    const angle = this.rad(newAngle - prevAngle);\n    const axis = this.handles.jointAxisStart[2].position\n      .clone()\n      .sub(this.handles.jointAxisEnd[2].position);\n    const point = this.handles.origins[2].position;\n    this.rotate(this.handles.joint[3], point, axis, angle);\n  };\n  updateGripper = (newValue: number, prevValue?: number) => {\n    // Calculate the change distance between start and end positions for each gripper\n    const leftDelta = this.handles.gripperPositions[1].position\n      .clone()\n      .sub(this.handles.gripperPositions[0].position);\n    const rightDelta = this.handles.gripperPositions[3].position\n      .clone()\n      .sub(this.handles.gripperPositions[2].position);\n\n    // Update the position of the grippers\n    this.handles.gripper[0].position.copy(\n      leftDelta\n        .multiplyScalar((newValue - 50) / 100)\n        .add(this.handles.gripperPositions[1].position),\n    );\n    this.handles.gripper[1].position.copy(\n      rightDelta\n        .multiplyScalar((newValue - 50) / 100)\n        .add(this.handles.gripperPositions[3].position),\n    );\n  };\n\n  rad = (angle: number): number => (angle * Math.PI) / 180;\n  /* Rotate an object about an axis with respect to a point in space. Uses relative coordinates.*/\n  rotate = (\n    obj: THREE.Object3D,\n    point: THREE.Vector3,\n    axis: THREE.Vector3,\n    theta: number,\n  ) => {\n    const normalAxis = axis.normalize();\n    obj.position.sub(point); // remove the offset\n    obj.position.applyAxisAngle(normalAxis, theta); // rotate the POSITION\n    obj.position.add(point); // re-add the offset\n    obj.rotateOnAxis(normalAxis, theta); // rotate the OBJECT\n  };\n  /* Update the visibility of the coordinate axes. */\n  updateAxesVisibility = (value: boolean) => {\n    this.handles.axis.visible = value;\n    for (let i = 5; i < 8; i++) {\n      this.handles.labels[i].visible = value;\n    }\n  };\n  /* Update the visibility of the labels and lines. */\n\n  displayLabelVisibility = (value: boolean) => {\n    for (let i = 0; i < 5; i++) {\n      this.handles.labels[i].visible = value;\n    }\n    this.handles.lines.forEach((line) => (line.visible = value));\n  };\n  resetPosition = () => {\n    this.setState({ robotValues: [0, 0, 0, 0, 0] });\n  };\n  /* Start the THREE rendering loop*/\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.renderTHREE);\n    }\n  };\n  /* Retrieve the y world position of the end-effector */\n  getEndEffectorYcor = () => {\n    this.handles.endEffector.getWorldPosition(this.worldPos);\n    return this.worldPos.y;\n  };\n  /* Retrieve end-effector coordinates as THREE.Vector3*/\n  endEffectorCoordinates = () => {\n    this.handles.endEffector.getWorldPosition(this.worldPos);\n    return this.worldPos.clone();\n  };\n  /* Display the end-effector coordinates on the coordinate-canvas */\n  drawEffectCoordinates = () => {\n    this.handles.endEffector.getWorldPosition(this.worldPos);\n    const { x, y, z } = this.worldPos;\n    const { width, height } = this.canvasCtx?.canvas as HTMLCanvasElement;\n    this.canvasCtx?.clearRect(0, 0, width, height);\n    this.drawTextOnCanvas(`End Effector: `, 80, 30);\n    this.drawTextOnCanvas(\n      `( ${x.toFixed(1)}, ${y.toFixed(1)}, ${z.toFixed(1)} )`,\n      80,\n      60,\n    );\n  };\n  /* Draw the text at the specified position*/\n  drawTextOnCanvas = (text: string, x: number, y: number) => {\n    if (this.canvasCtx) {\n      this.canvasCtx.font = 'Bold 25px Roboto';\n      this.canvasCtx.fillStyle = 'rgba(0,0,0,1)';\n      this.canvasCtx.fillText(text, x, y);\n    }\n  };\n  /* Update the lighting in accordance to camera position */\n  updateView = () => {\n    this.controls.update();\n    this.light.position.copy(this.handles.camera.position);\n    this.handles.renderer.render(this.handles.scene, this.handles.camera);\n  };\n\n  /* THREE render loop */\n  renderTHREE = () => {\n    this.updateView();\n    this.drawEffectCoordinates();\n    if (this.state.animation) {\n      this.drawPositions();\n    }\n\n    this.frameId = requestAnimationFrame(this.renderTHREE);\n  };\n\n  /* Animate the arm moving betweet the positions retrieved in state.positionSeq*/\n  drawPositions = () => {\n    const { length } = this.state.positionSeq;\n    const positions = this.state.positionSeq;\n    if (length === 0) return;\n    else if (length === 1) {\n      // Set the arm to the position\n      this.setState({\n        robotValues: positions[0].values.slice(),\n      });\n    } else {\n      // Update the current arm position index\n      if (this.frameCount === frames) {\n        this.crtIndex++;\n        this.frameCount = 0;\n        if (this.crtIndex >= length) this.crtIndex = 0;\n        this.nextIndex = this.crtIndex + 1;\n        if (this.crtIndex === length - 1) this.nextIndex = 0;\n        this.newPosition = [...positions[this.crtIndex].values];\n      }\n      // Set the angle change per position\n      if (this.frameCount !== frames) {\n        if (this.frameCount === 0) {\n          // Calculate the angle delta to add to current position\n          this.angleDelta = this.angleDelta.map((value, index) => {\n            return (value =\n              (positions[this.nextIndex].values[index] -\n                positions[this.crtIndex].values[index]) /\n              frames);\n          });\n        }\n        this.frameCount++;\n\n        // Update current position values\n        this.newPosition = this.newPosition.map((value, index) => {\n          return value + this.angleDelta[index];\n        });\n        // set new position\n        this.setState({ robotValues: [...this.newPosition] });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div ref={this.threeRootElement} className=\"threeCanvas\">\n        <ModelControls\n          resetPosition={this.resetPosition}\n          updateConfig={this.updateArmConfig}\n          displayAxis={this.displayAxis}\n          displayLabel={this.displayLabel}\n          receiveRobotValues={this.sendRobotValues}\n          startAnimation={this.startAnimation}\n          stopAnimation={this.stopAnimation}\n          getEndEffectorYcor={this.getEndEffectorYcor}\n          effectorIntersect={this.endEffectorIntersect}\n        />\n        <canvas className=\"coordinate-canvas\" ref={this.canvasRef} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport ThreeContainer from './components/ThreeContainer';\n\nclass App extends React.PureComponent {\n  render(): JSX.Element {\n    return (\n      <div className=\"page\">\n        <ThreeContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\ndocument.body.style.overflow = 'hidden';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}